# Generated by Django 5.1.7 on 2025-10-16 12:12

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Attempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('in_progress', 'В процессе'), ('completed', 'Завершено'), ('aborted', 'Прервано')], default='in_progress', max_length=16)),
                ('client_fingerprint_hash', models.CharField(blank=True, db_index=True, max_length=128)),
                ('progress_index', models.IntegerField(default=0)),
                ('autosave_ts', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order_index', models.PositiveIntegerField()),
                ('text', models.TextField()),
                ('type', models.CharField(choices=[('single', 'Одиночный выбор'), ('multiple', 'Множественный выбор'), ('scale', 'Шкала / числовой'), ('text', 'Свободный ввод')], max_length=16)),
                ('required', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['test_id', 'order_index', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order_index', models.PositiveIntegerField()),
                ('text', models.TextField()),
                ('value', models.CharField(blank=True, max_length=64)),
                ('weights_json', models.JSONField(blank=True, default=dict)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='tests.question')),
            ],
            options={
                'ordering': ['question_id', 'order_index', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('option_ids', models.JSONField(blank=True, default=list)),
                ('text_value', models.TextField(blank=True)),
                ('saved_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='tests.attempt')),
                ('option_single', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='answers_single', to='tests.option')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='tests.question')),
            ],
            options={
                'ordering': ['attempt_id', 'question_id'],
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('summary_md', models.TextField(blank=True)),
                ('raw_json', models.JSONField(blank=True, default=dict)),
                ('computed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='tests.attempt')),
            ],
            options={
                'ordering': ['-computed_at'],
            },
        ),
        migrations.CreateModel(
            name='ResultDimension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=32)),
                ('title', models.CharField(max_length=100)),
                ('score', models.FloatField()),
                ('level', models.CharField(max_length=50)),
                ('explanation_md', models.TextField(blank=True)),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dimensions', to='tests.result')),
            ],
            options={
                'ordering': ['result_id', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ShareLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='share_link', to='tests.attempt')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('short_description', models.TextField(blank=True)),
                ('instructions_md', models.TextField(blank=True)),
                ('est_minutes', models.PositiveIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1)])),
                ('hero_image_url', models.URLField(blank=True)),
                ('seo_title', models.CharField(blank=True, max_length=200)),
                ('seo_description', models.TextField(blank=True)),
                ('og_image_url', models.URLField(blank=True)),
                ('is_published', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['title'],
                'indexes': [models.Index(fields=['is_published'], name='tests_test_is_publ_9388ca_idx'), models.Index(fields=['slug'], name='tests_test_slug_68c95b_idx')],
            },
        ),
        migrations.CreateModel(
            name='ScoringRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rule_type', models.CharField(choices=[('linear_weights', 'Линейные веса'), ('lookup_table', 'Таблица соответствий'), ('formula', 'Формула')], max_length=32)),
                ('rule_payload_json', models.JSONField(blank=True, default=dict)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scoring_rules', to='tests.test')),
            ],
            options={
                'ordering': ['test_id', 'id'],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='tests.test'),
        ),
        migrations.AddField(
            model_name='attempt',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='tests.test'),
        ),
        migrations.AddIndex(
            model_name='option',
            index=models.Index(fields=['question', 'order_index'], name='tests_optio_questio_867534_idx'),
        ),
        migrations.AddIndex(
            model_name='option',
            index=models.Index(fields=['value'], name='tests_optio_value_4a7bfc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='option',
            unique_together={('question', 'order_index')},
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['attempt', 'question'], name='tests_answe_attempt_0f6f8f_idx'),
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['saved_at'], name='tests_answe_saved_a_78bc50_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='answer',
            unique_together={('attempt', 'question')},
        ),
        migrations.AddIndex(
            model_name='result',
            index=models.Index(fields=['computed_at'], name='tests_resul_compute_fda8b3_idx'),
        ),
        migrations.AddIndex(
            model_name='resultdimension',
            index=models.Index(fields=['result'], name='tests_resul_result__6e58ae_idx'),
        ),
        migrations.AddIndex(
            model_name='resultdimension',
            index=models.Index(fields=['code'], name='tests_resul_code_c98935_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='resultdimension',
            unique_together={('result', 'code')},
        ),
        migrations.AddIndex(
            model_name='sharelink',
            index=models.Index(fields=['uuid'], name='tests_share_uuid_34f2e8_idx'),
        ),
        migrations.AddIndex(
            model_name='sharelink',
            index=models.Index(fields=['is_active'], name='tests_share_is_acti_5f61dc_idx'),
        ),
        migrations.AddIndex(
            model_name='scoringrule',
            index=models.Index(fields=['test', 'rule_type'], name='tests_scori_test_id_9334cc_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['test', 'order_index'], name='tests_quest_test_id_96ffb6_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['test'], name='tests_quest_test_id_0e3122_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together={('test', 'order_index')},
        ),
        migrations.AddIndex(
            model_name='attempt',
            index=models.Index(fields=['test', 'status'], name='tests_attem_test_id_0ea8dc_idx'),
        ),
        migrations.AddIndex(
            model_name='attempt',
            index=models.Index(fields=['started_at'], name='tests_attem_started_d0b5d9_idx'),
        ),
    ]
